Отображает местоположение папки yarn bin.

yarn bin [<executable>]
yarn bin будет выведена папка, в которую yarn установит исполняемые файлы для вашего пакета. Примером исполняемого файла может быть сценарий, который вы определили для своего пакета и который можно запустить с помощью yarn run.
Пример:

$ yarn bin
/home/emillumine/Code/Funkwhale/funkwhale/front/node_modules/.bin
yarn bin <executable> выведет путь к исполняемому файлу.
Пример:

$ yarn bin gettext-compile

lass RoleController extends Controller {
    /* ... */
    public function update(Request $request, Role $role) {
        if ($role->id === 1) {
            return redirect()
                ->route('admin.role.index')
                ->withErrors('Эту роль нельзя редактировать');
        }
        $this->validator($request->all(), $role->id)->validate();
        if (in_array($role->id, [2, 3])) {
            $role->update($request->except('slug'));
        } else {
            $role->update($request->all());
        }
        $role->permissions()->sync($request->perms ?? []);
        return redirect()
            ->route('admin.role.index')
            ->with('success', 'Роль была успешно отредактирована');
    }
    /* ... */
    public function destroy(Role $role) {
        if (in_array($role->id, [1, 2, 3])) {
            return redirect()
                ->route('admin.role.index')
                ->withErrors('Эту роль нельзя удалить');
        }
        $role->delete();
        return redirect()
            ->route('admin.role.index')
            ->with('success', 'Роль была успешно удалена');
    }
    /* ... */
}


VerifyEmailController extends Controller {
    /* ... */
    public function verify($token, $id) {
        /* ... */
        // все проверки пройдены, активируем аккаунт
        $user->update(['email_verified_at' => Carbon::now()]);
        // назначаем роль для нового пользователя
        $user->assignRoles('user');
        return redirect()
            ->route('auth.login')
            ->with('success', 'Вы успешно подтвердили свой адрес почты');
    }
yarn install Используется для установки всех зависимостей для проекта. Чаще всего это делается, когда вы только что проверили код для проекта или когда другой разработчик проекта добавил новую зависимость, которую вам нужно установить.

Если вы привыкли использовать npm, возможно, вы ожидаете использовать --save или --save-dev. Они были заменены на yarn add и yarn add --dev. Для получения дополнительной информации см. в yarn addдокументации.

Запуск yarn без команды будет выполняться yarn install с использованием любых предоставленных флагов.

Если вам нужны воспроизводимые зависимости, что обычно требуется для систем непрерывной интеграции, вам следует передать флаг --frozen-lockfile

yarn install
Установите все зависимости, перечисленные внутри, package.json в локальную node_modules папку.

yarn.lockФайл используется следующим образом:

Если yarn.lock присутствует и его достаточно для удовлетворения всех зависимостей, перечисленных в package.json, то будут установлены точные версии, указанные в yarn.lock, и yarn.lock не изменится. Yarn не будет проверять наличие более новых версий.
Если yarn.lock отсутствует или недостаточно для удовлетворения всех зависимостей, перечисленных в package.json (например, если вы вручную добавляете зависимость в package.json), Yarn ищет доступные новейшие версии, удовлетворяющие ограничениям в package.json. Результаты записываются в yarn.lock.
Если вы хотите убедиться, что yarn.lock не обновляется, используйте --frozen-lockfile.

yarn install --check-files
Проверяет, что уже установленные файлы в node_modules не были удалены.

yarn install --flat
Установите все зависимости, но разрешите использовать только одну версию для каждого пакета. При первом запуске вам будет предложено выбрать одну версию для каждого пакета, от которого зависит несколько диапазонов версий. Они будут добавлены в package.json в поле resolutions

"resolutions": {
  "package-a": "2.0.0",
  "package-b": "5.0.0",
  "package-c": "1.5.2"
}
yarn install --force
При этом выполняется повторная загрузка всех пакетов, даже тех, которые были установлены ранее.

yarn install --har
Выводит HTTP-архив всех сетевых запросов, выполненных во время установки. Файлы HAR обычно используются для анализа производительности сети и могут быть проанализированы с помощью таких инструментов, как Google HAR Analyzer или HAR Viewer.

yarn install --ignore-scripts
Не выполняйте никакие сценарии, определённые в файле package.json проекта и его зависимостях.

yarn install --modules-folder <path>
Указывает альтернативное расположение каталога node_modules вместо стандартного ./node_modules.

yarn install --no-lockfile
Не читайте и не генерируйте yarn.lock файл блокировки.

yarn install --production[=true|false]
Yarn не установит ни один из пакетов, перечисленных в devDependencies, если для переменной среды NODE_ENV задано значение production. Используйте этот флаг, чтобы указать Yarn игнорировать NODE_ENV и вместо этого использовать этот флаг для определения статуса пакета.

Примечания: --production то же самое, что --production=true. --prod является псевдонимом --production.

yarn install --pure-lockfile
Не создавайте yarn.lock файл блокировки.

yarn install --focus
Устанавливает зависимости рабочей среды пакета в подпапке node_modules рабочей среды. Это позволяет запускать рабочую среду без создания других рабочих сред, от которых она зависит.

Необходимо запускать в отдельном рабочем пространстве в проекте с рабочими пространствами. Нельзя запускать в проекте без рабочих пространств или в корневом каталоге проекта с рабочими пространствами.

Узнайте больше о сфокусированных рабочих пространствах.

yarn install --frozen-lockfile
Не создавайте файл блокировки yarn.lock и не выходите из системы, если требуется обновление.

yarn install --silent
Запустите yarn install, не распечатывая журнал установки.

yarn install --ignore-engines
Игнорируйте проверку двигателей.

yarn install --ignore-optional
Не устанавливайте необязательные зависимости.

yarn install --offline
Запустите yarn install в автономном режиме.

yarn install --non-interactive
Отключите интерактивные подсказки, например, при наличии недопустимой версии зависимости.

yarn install --update-checksums
Обновите контрольные суммы в файле блокировки yarn.lock в случае несоответствия между ними и контрольной суммой пакета.

yarn install --audit
Проверяет установленные пакеты на наличие известных проблем с безопасностью. Количество обнаруженных проблем будет добавлено к выводу. Для получения дополнительной информации используйте команду yarn audit. В отличие от npm, который автоматически выполняет проверку при каждой установке, yarn выполняет проверку только по запросу. (Это может измениться в более позднем обновлении, если функция окажется стабильной.)

yarn install --no-bin-links
Запретите yarn создавать символические ссылки для любых двоичных файлов, которые может содержать пакет.

yarn install --link-duplicates
Создайте жесткие ссылки на повторяющиеся модули в node_modules.

yarn install --verbose
Показывать дополнительные журналы при установке зависимостей
